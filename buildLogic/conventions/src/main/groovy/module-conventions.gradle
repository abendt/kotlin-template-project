plugins {
    id 'kotlin-conventions'

    id("com.adarshr.test-logger")

    id 'jvm-test-suite'
}

def catalogs = project.extensions.getByType(VersionCatalogsExtension)
def version = {String name -> catalogs.named("libs").findVersion(name).get().getRequiredVersion()}

dependencies {
    implementation(libs.kotlinLogging)

    testImplementation(platform(libs.junit.bom))
    testImplementation(libs.bundles.kotest)
    testImplementation(libs.mockk)

    runtimeOnly(libs.bundles.logback)
    runtimeOnly(libs.bundles.slf4j)
}

configurations {
    all {
        exclude module: "log4j"
        exclude module: "mockito-core"
        exclude module: "junit"
        exclude module: "commons-logging"
    }
}

def isIdea = providers.systemProperty("idea.version")
testlogger {
    // idea can't handle ANSI output
    setTheme(isIdea.isPresent() ? "plain" : "mocha")
    showFullStackTraces = false

    showStandardStreams = true
    showPassedStandardStreams = false
    showSkippedStandardStreams = false
    showFailedStandardStreams = true

    showPassed = true
    showSkipped = false
    showFailed = true
}

testing {
    suites {
        test {
            useJUnitJupiter(version("junit"))

            dependencies {
            }
        }

        configureEach {
            targets {
                all {
                    testTask.configure {
                        def loggingProperties = new File(workingDir, "src/test/resoures/logging.properties")
                        if (loggingProperties.exists()) {
                            systemProperties(['java.util.logging.config.file': loggingProperties])
                        }
                    }
                }
            }
        }
    }
}
